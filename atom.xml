<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-07T14:26:16.979Z</updated>
  <id>http://example.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS中的this指向问题</title>
    <link href="http://example.com/2021/03/07/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/03/07/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-07T13:38:58.341Z</published>
    <updated>2021-03-07T14:26:16.979Z</updated>
    
    <content type="html"><![CDATA[<p>this指向是JS中的重要概念，有助于帮助我们理解函数的执行。</p><h2 id="this基本概念"><a href="#this基本概念" class="headerlink" title="this基本概念"></a>this基本概念</h2><p>一句话来概括，this就是函数的执行上下文，可以把它理解成一个指针，指向调用函数的对象。根据它的使用方式，可以分为四种绑定方式。</p><ul><li>显示绑定</li><li>隐式绑定</li><li>默认绑定</li><li>new绑定</li></ul><h2 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h2><p>显示绑定就是通过call, apply, bind方法，显示地指定this的指向。</p><p>call,apply与bind的第一个参数就是所要绑定的对象，call,apply与bind不同的是，call与apply会立即执行这个函数得到结果，而bind则会返回一个函数，而call与apply在传参上也有差异，call需要显示传入所有参数，而apply传入一个参数数组。两者在性能上也有区别，与本主题无关，这里暂不讨论。</p><p>以下是一个显示绑定的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function sayHi()&#123;</span><br><span class="line">    console.log(&#39;Hello,&#39;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">var person &#x3D; &#123;</span><br><span class="line">    name: &#39;Wushibao&#39;,</span><br><span class="line">&#125;</span><br><span class="line">var name &#x3D; &#39;Jim&#39;;</span><br><span class="line">sayHi.call(person); &#x2F;&#x2F;&quot;Hello, Wushibao&quot;</span><br></pre></td></tr></table></figure><p>接下来看一下隐式绑定。</p><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>隐式绑定通常以XXX.fun()的形式出现，即函数的指向会被绑定到它的上下文对象。来看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sayHi()&#123;</span><br><span class="line">    console.log(&#39;Hello,&#39;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">var person &#x3D; &#123;</span><br><span class="line">    name: &#39;Wushibao&#39;,</span><br><span class="line">    sayHi: sayHi</span><br><span class="line">&#125;</span><br><span class="line">var name &#x3D; &#39;Jim&#39;;</span><br><span class="line">person.sayHi();</span><br></pre></td></tr></table></figure><p>打印的结果是Hello, Wushibao。</p><p>当有多层对象属性链时，只有最后一层会影响结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sayHi()&#123;</span><br><span class="line">    console.log(&#39;Hello,&#39;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">var person2 &#x3D; &#123;</span><br><span class="line">  name: &quot;James&quot;,</span><br><span class="line">  sayHi: sayHi</span><br><span class="line">&#125;</span><br><span class="line">var person1 &#x3D; &#123;</span><br><span class="line">  name: &quot;Paul&quot;</span><br><span class="line">  friend: person2</span><br><span class="line">&#125;</span><br><span class="line">person1.friend.sayHi()</span><br></pre></td></tr></table></figure><p>打印结果： Hello, James<br>即无论有多少层对象，我们只关注最后一层，即此处的friend 但是隐式绑定存在丢失的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function sayHi()&#123;</span><br><span class="line">    console.log(&#39;Hello,&#39;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">var person &#x3D; &#123;</span><br><span class="line">    name: &#39;Wushibao&#39;,</span><br><span class="line">    sayHi: sayHi</span><br><span class="line">&#125;</span><br><span class="line">var name &#x3D; &#39;Jim&#39;;</span><br><span class="line">var Hi &#x3D; person.sayHi;</span><br><span class="line">Hi();</span><br></pre></td></tr></table></figure><p>此时输出：Hello, Jim。除了上述这种丢失之外，隐式丢失还会发生在回调函数中，来看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function sayHi()&#123;</span><br><span class="line">    console.log(&#39;Hello,&#39;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">var person1 &#x3D; &#123;</span><br><span class="line">    name: &#39;Wushibao&#39;,</span><br><span class="line">    sayHi: function()&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&#39;Hello,&#39;,this.name);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var name&#x3D;&#39;Jim&#39;;</span><br><span class="line">person1.sayHi();</span><br></pre></td></tr></table></figure><p>此时，并为输出Hello, Wushibao而是输出Hello,Jim。表明在回调函数中this也存在隐式丢失的情况<br>所以在判断this指向时要注意隐式丢失的情况</p><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><p>在不应用以上两种规则的情况下，采用默认绑定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function sayHi()&#123;</span><br><span class="line">    console.log(&#39;Hello,&#39;, this.name);</span><br><span class="line">&#125;</span><br><span class="line">var name &#x3D; &#39;Wushibao&#39;;</span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure><p>在调用sayHi()函数时，此时this默认指向全局对象（非严格模式下），严格模式下，this指向undefined，undefined上没有this对象，会报错。</p><p>在浏览器环境下，输出的结果就是Hello,Wushibao</p><h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><p>在阐述new绑定之前，来先看一下new操作符做了什么事情。</p><p>1.创建一个新的对象<br>2.将this指向这个新对象<br>3.执行构造函数的代码<br>4.将对象的proto属性设置为构造函数的原型对象<br>5.返回新对象</p><p>所以，在使用new调用函数的时候，会将新对象绑定到这个函数的this上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sayHi(name)&#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var Hi &#x3D; new sayHi(&#39;Wushibao&#39;);</span><br><span class="line">console.log(&#39;Hello,&#39;, Hi.name);</span><br></pre></td></tr></table></figure><p>此时，输出Hello: Wushibao</p><h2 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h2><p>new绑定 &gt; 显式绑定 &gt; 隐式绑定 &gt; 默认绑定</p><h2 id="箭头函数的this"><a href="#箭头函数的this" class="headerlink" title="箭头函数的this"></a>箭头函数的this</h2><p>箭头函数是ES6中新增特性，与普通函数不同的是，箭头函数没有自己的this，它继承自外层的this。来看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">    say: ()&#x3D;&gt;&#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say()</span><br></pre></td></tr></table></figure><p>此时，在浏览器的环境下输出window。因为正如之前所说的，箭头函数this继承自外层的this。<br>关于this，暂且先写到这里。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this指向是JS中的重要概念，有助于帮助我们理解函数的执行。&lt;/p&gt;
&lt;h2 id=&quot;this基本概念&quot;&gt;&lt;a href=&quot;#this基本概念&quot; class=&quot;headerlink&quot; title=&quot;this基本概念&quot;&gt;&lt;/a&gt;this基本概念&lt;/h2&gt;&lt;p&gt;一句话来概括，</summary>
      
    
    
    
    <category term="JS" scheme="http://example.com/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序canvas踩坑.md</title>
    <link href="http://example.com/2021/03/07/%E5%B0%8F%E7%A8%8B%E5%BA%8Fcanvas%E8%B8%A9%E5%9D%91/"/>
    <id>http://example.com/2021/03/07/%E5%B0%8F%E7%A8%8B%E5%BA%8Fcanvas%E8%B8%A9%E5%9D%91/</id>
    <published>2021-03-07T13:06:32.000Z</published>
    <updated>2021-03-07T14:26:22.537Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下小程序中踩的坑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下小程序中踩的坑&lt;/p&gt;
</summary>
      
    
    
    
    <category term="小程序" scheme="http://example.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
</feed>
